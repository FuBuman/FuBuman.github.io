{"version":3,"sources":["logo.svg","Terminal.tsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexDirection","alignItems","marginTop","spacing","button","margin","placeholder","height","Terminal","classes","React","useState","query","setQuery","Password","setPassword","visible","setvisible","timerRef","useRef","useEffect","clearTimeout","current","Loader","props","messages","messageIndex","setMessageIndex","timeout","length","setTimeout","className","Typography","Fade","in","style","transitionDelay","unmountOnExit","CircularProgress","TextField","label","type","autoComplete","variant","onChange","e","target","value","Button","onClick","window","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAe,I,6DCITA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,UAAWL,EAAMM,QAAQ,IAE7BC,OAAQ,CACJC,OAAQR,EAAMM,QAAQ,IAE1BG,YAAa,CACTC,OAAQ,IAEZF,OAAQ,CACJH,UAAWL,EAAMM,QAAQ,QAKpBK,EAAW,WACpB,IAAMC,EAAUd,IADU,EAEAe,IAAMC,SAAS,QAFf,mBAEnBC,EAFmB,KAEZC,EAFY,OAGMH,IAAMC,SAAS,IAHrB,mBAGnBG,EAHmB,KAGTC,EAHS,OAIIL,IAAMC,UAAS,GAJnB,mBAInBK,EAJmB,KAIVC,EAJU,KAKpBC,EAAWR,IAAMS,OAAO,GAG9BT,IAAMU,WACF,kBAAM,WACFC,aAAaH,EAASI,YAE1B,IAGJ,IAAMC,EAAS,SAACC,GAAgB,IACpBC,EAAaD,EAAbC,SADmB,EAGaf,IAAMC,SAAS,GAH5B,mBAGpBe,EAHoB,KAGNC,EAHM,KAkB3B,OAZAjB,IAAMU,WAAU,WAEZ,IAAIQ,EAKJ,OAJIF,EAAeD,EAASI,OAAS,IACjCD,EAAUE,YAAW,kBAAMH,EAAgBD,EAAe,KAAI,MAG3D,WACHL,aAAaO,MAElB,CAACH,EAAUC,IAEP,8BAAMD,EAASC,MAyB1B,OACI,sBAAKK,UAAWtB,EAAQX,KAAxB,UACI,qBAAKiC,UAAWtB,EAAQH,YAAxB,SACe,YAAVM,EACG,cAACoB,EAAA,EAAD,uBAEI,cAACC,EAAA,EAAD,CACIC,GAAc,aAAVtB,EACJuB,MAAO,CACHC,gBAA2B,aAAVxB,EAAuB,QAAU,OAEtDyB,eAAa,EALjB,SAOI,cAACC,EAAA,EAAD,QAIhB,cAACC,EAAA,EAAD,CACIR,UAAWtB,EAAQJ,OACnBmC,MAAM,WACNC,KAAK,WACLC,aAAa,mBACbC,QAAQ,WACRC,SAAW,SAACC,GAAD,OAAO9B,EAAY8B,EAAEC,OAAOC,UAE3C,cAACC,EAAA,EAAD,CAAQC,QA9CS,WACJ,UAAbnC,IAIJO,aAAaH,EAASI,SAER,SAAVV,GAKJC,EAAS,YACTI,GAAW,GACXC,EAASI,QAAU4B,OAAOpB,YAAW,WACjCjB,EAAS,WACTI,GAAW,KACZ,MATCJ,EAAS,UAsC0BkB,UAAWtB,EAAQL,OAAtD,SACe,SAAVQ,EAAmB,QAAU,oBAEjCI,GAAW,cAACO,EAAD,CAAQE,SAhFX,CAAC,yDAAoD,uECjB3D0B,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b8061a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Box, Button, CircularProgress, Fade, LinearProgress, makeStyles, TextField, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    button: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    placeholder: {\r\n        height: 40,\r\n    },\r\n    margin: {\r\n        marginTop: theme.spacing(2)\r\n    }\r\n}));\r\n\r\n\r\nexport const Terminal = () => {\r\n    const classes = useStyles();\r\n    const [query, setQuery] = React.useState('idle');\r\n    const [Password, setPassword] = React.useState(\"\");\r\n    const [visible, setvisible] = React.useState(false);\r\n    const timerRef = React.useRef(0);\r\n    const messages = [\"hier könnte dein Text für dein Geochache stehen!\", \"Hier köntne noch viel mehr text stehen, wenn du das willst\"];\r\n\r\n    React.useEffect(\r\n        () => () => {\r\n            clearTimeout(timerRef.current);\r\n        },\r\n        [],\r\n    );\r\n\r\n    const Loader = (props: any) => {\r\n        const { messages } = props;\r\n        // Default to the first message passed\r\n        const [messageIndex, setMessageIndex] = React.useState(0);\r\n\r\n\r\n        React.useEffect(() => {\r\n            // Move on to the next message every `n` milliseconds\r\n            let timeout: any;\r\n            if (messageIndex < messages.length - 1) {\r\n                timeout = setTimeout(() => setMessageIndex(messageIndex + 1), 3000);\r\n            }\r\n\r\n            return () => {\r\n                clearTimeout(timeout);\r\n            };\r\n        }, [messages, messageIndex]);\r\n\r\n        return <div>{messages[messageIndex]}</div>;\r\n    }\r\n\r\n\r\n    const handleClickQuery = () => {\r\n        if (Password !== \"guido\") {\r\n            return\r\n        }\r\n\r\n        clearTimeout(timerRef.current);\r\n\r\n        if (query !== 'idle') {\r\n            setQuery('idle');\r\n            return;\r\n        }\r\n\r\n        setQuery('progress');\r\n        setvisible(true)\r\n        timerRef.current = window.setTimeout(() => {\r\n            setQuery('success');\r\n            setvisible(false)\r\n        }, 10000);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.placeholder}>\r\n                {query === 'success' ? (\r\n                    <Typography>Success!</Typography>\r\n                ) : (\r\n                        <Fade\r\n                            in={query === 'progress'}\r\n                            style={{\r\n                                transitionDelay: query === 'progress' ? '800ms' : '0ms',\r\n                            }}\r\n                            unmountOnExit\r\n                        >\r\n                            <CircularProgress />\r\n                        </Fade>\r\n                    )}\r\n            </div>\r\n            <TextField\r\n                className={classes.margin}\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n                variant=\"outlined\"\r\n                onChange={((e) => setPassword(e.target.value))}\r\n            />\r\n            <Button onClick={handleClickQuery} className={classes.button}>\r\n                {query !== 'idle' ? 'Reset' : 'Simulate a load'}\r\n            </Button>\r\n            {visible && <Loader messages={messages} />}\r\n        </div>\r\n    );\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Terminal } from \"./Terminal\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Terminal></Terminal>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}